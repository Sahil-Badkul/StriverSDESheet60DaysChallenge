/*************************************************************
 
    Following is the Binary Tree node structure.

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/

vector<int> bottomView(BinaryTreeNode<int> * root){
    vector<int> ans;
    if(root == NULL) return ans;
    // for storing level in order;
    map<int,int> mp;
    // queue for maintaining sequence
    queue<pair<BinaryTreeNode<int>*, int>> q;
    q.push({root, 0});
    mp[0] = root->data;   
    while(!q.empty()){
        auto *root = q.front().first;
        int l = q.front().second;
        q.pop();
        // to insert last updated value
        mp[l] = root->data;
        if(root->left) q.push({root->left, l-1});
        if(root->right) q.push({root->right, l+1});
    }
    for(auto &it : mp){
        ans.push_back(it.second);
    }
    return ans;
}
